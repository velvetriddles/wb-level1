package main

import (
	"fmt"
	"math"
	"sync"
)

/*
	=== Задача №3 ===

	Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов(22+32+42….)
	с использованием конкурентных вычислений.

*/

func main() {
	array := [...]int{2, 4, 6, 8, 10}

	in := make(chan int)     // начальный канал для входящих данных
	result := make(chan int) // канал для результата
	wg := new(sync.WaitGroup)

	wg.Add(len(array))

	// Запускаем пайплайн
	go func() {
		defer close(result) // закрываем канал результата после завершения всех операций

		for i, value := range array { // проход по исходному массиву
			out := make(chan int) // каждый раз создаем свой выходной канал для новой горутины

			go func(in, out chan int, wg *sync.WaitGroup, value int) {
				defer wg.Done()
				defer close(out)                               // обязательно закрываем там где пишем
				sum := <-in + int(math.Pow(float64(value), 2)) // подсчет ряда
				out <- sum                                     // записываем результат в выходной канал
			}(in, out, wg, value)

			in = out // передаем указатель на дескриптор выходного в входной канал, то есть входной канал для принимающей горутины является выходным отдающей горутины

			if i == len(array)-1 { // когда достигли последнего элемента, то есть остановка пайплайна
				result <- <-out // передаем результат в канал
			}
		}
	}()

	in <- 0   // запускаем цепочку передачи данных, 0 потому что изначально сумма равна нулю, сумма динамически растет в горутинах
	wg.Wait() // ждем завершения всех горутин

	fmt.Println(<-result)
}
